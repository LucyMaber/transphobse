import logging
import re
import unicodedata


KEYWORDS = [
    "lgb",
    "māhū",
    "muxe",
    "hijra",
    "terf ",
    "tranny",
    "agender",
    "demigal",
    "kathoey",
    "demiboy",
    "demiguy",
    "LGBTQIA",
    "gender-",
    "intersex",
    "demienby",
    "bigender",
    "futanari",
    "demimasc",
    "demigirl",
    "travesti",
    "altersex",
    "x-gender",
    "demiflux",
    "trannies",
    "fakaleitī",
    "takatāpui",
    "androgyne",
    "trans man",
    "cogenitor",
    "androgyny",
    "demifluid",
    "anti-male",
    "cisgender",
    "androgynos",
    "trans hate",
    "transphobi",
    "anti-trans",
    "fakafifine",
    "two spirit",
    "non binary",
    "deadnaming",
    "anti-woman",
    "Transology",
    "faʻafafine",
    "tranvestia",
    "Sex rights",
    "wrong body",
    "women-only",
    "'akava'ine",
    "demigender",
    "sex change",
    "anti-female",
    "transgender",
    "transsexual",
    "cass report",
    "trans woman",
    "transphobia",
    "neutral sex",
    "transphobic",
    "genderfluid",
    "misgendered",
    "androgynous",
    "trans youth",
    "sex matters",
    "genderqueer",
    "hilary cass",
    "Cass Review",
    "trans people",
    "gender queer",
    "detransition",
    "intersex man",
    "misgendering",
    "third gender",
    "gender-based",
    "shapeshifter",
    "trans rights",
    "trans issues",
    "cisgender man",
    "gender clinic",
    "intersex woman",
    "female erasure",
    "gender-neutral",
    "trans advocacy",
    "transmasculine",
    "affirming care",
    "intersectional",
    "vakasalewalewa",
    "biological man",
    "gender identity",
    "gender agnostic",
    "gender euphoria",
    "trans exclusion",
    "hermaphroditism",
    "transmedicalism",
    "gender critical",
    "trans-inclusive",
    "biological male",
    "trans community",
    "intersex people",
    "intersex person",
    "identity denial",
    "cisgender woman",
    "bigender person",
    "detransitioners",
    "Hormone blockers",
    "biological woman",
    "social contagion",
    "gender divisions",
    "gender dysphoria",
    "sex-based rights",
    "puberty blockers",
    "queer liberation",
    "trans breast milk",
    "single sex spaces",
    "biological female",
    "gender specialist",
    "assigned at birth",
    "intersectionality",
    "genderqueer person",
    "genderqueer people",
    "adult human female",
    "conversion therapy",
    "androgynous people",
    "androgynous person",
    "men in women spaces",
    "protect women sports",
    "trans discrimination",
    "protect women rights",
    "men in women's spaces",
    "gender non-conforming",
    "protect women's sports",
    "trans identified males",
    "trans rights violation",
    "protect women's rights",
    "intersectional feminism",
    "legal definition of sex",
    "biological essentialism",
    "assigned female at birth",
    "trans-inclusive feminism",
    "gender-critical feminism",
    "trans exclusionary feminism",
    "rapid onset gender dysphoria",
    "trans-exclusionary radical feminist",
]


irrelevant_for_keywords = [
    "transe",
    "transm",
    "ctrans",
    "transa",
    "transf",
    "strans",
    "itrans",
    "transp",
    "vtrans",
    "transl",
    "transv",
    "atrans",
    "transx",
    "transec",
    "cotrans",
    "intrans",
    "transax",
    "transac",
    "transys",
    "transia",
    "transin",
    "transom",
    "transsc",
    "eutrans",
    "transly",
    "wytrans",
    "transam",
    "patrans",
    "transil",
    "transex",
    "transch",
    "transas",
    "transmo",
    "transco",
    "transit",
    "sptrans",
    "transwa",
    "transyt",
    "butrans",
    "transdev",
    "samtrans",
    "transpor",
    "transcad",
    "transdec",
    "transpec",
    "transsec",
    "transifs",
    "transocm",
    "transire",
    "eastrans",
    "transgas",
    "unitrans",
    "transord",
    "transcap",
    "transbus",
    "translit",
    "tktransr",
    "sistrans",
    "nestrans",
    "transude",
    "jictrans",
    "transmew",
    "transits",
    "transron",
    "transdiv",
    "transman",
    "transair",
    "transmat",
    "transcom",
    "tranship",
    "transmac",
    "transtar",
    "geotrans",
    "transmod",
    "transtec",
    "transnow",
    "transeat",
    "transarc",
    "transoms",
    "transmit",
    "transfer",
    "transloc",
    "reftrans",
    "transims",
    "transhab",
    "transgaz",
    "dextrans",
    "transect",
    "transadf",
    "transact",
    "transume",
    "transyte",
    "transkei",
    "transcur",
    "transpac",
    "westrans",
    "transept",
    "avitrans",
    "transltr",
    "sustrans",
    "filtrans",
    "caltrans",
    "saftrans",
    "reptrans",
    "transval",
    "diptrans",
    "sectrans",
    "transmux",
    "transnet",
    "navtrans",
    "transfix",
    "transecur",
    "transires",
    "transproc",
    "transomed",
    "transtrum",
    "transvert",
    "transfers",
    "cinctrans",
    "transgrid",
    "cttransit",
    "transfuge",
    "transenna",
    "transterm",
    "wordtrans",
    "transcona",
    "capstrans",
    "transmute",
    "transmeta",
    "transmits",
    "tranships",
    "actransit",
    "transapex",
    "transpare",
    "transfect",
    "transport",
    "transship",
    "transform",
    "omnitrans",
    "transflux",
    "itransact",
    "sumatrans",
    "transhape",
    "transpire",
    "transvaal",
    "transcend",
    "transjoik",
    "transacts",
    "transmove",
    "pinftrans",
    "transpile",
    "mototrans",
    "translate",
    "transitus",
    "transsect",
    "transenne",
    "transgene",
    "transvest",
    "transtech",
    "transhelp",
    "transwave",
    "transfuse",
    "transfare",
    "transuded",
    "transepts",
    "transaxle",
    "transitio",
    "translohr",
    "transcode",
    "transalta",
    "duratrans",
    "transects",
    "transitex",
    "transcaer",
    "transfund",
    "transcyte",
    "helitrans",
    "transduce",
    "sinotrans",
    "transpose",
    "transmete",
    "transcomm",
    "transumpt",
    "translink",
    "transeunt",
    "transonic",
    "transient",
    "transited",
    "transpass",
    "transcare",
    "transcoop",
    "transwerk",
    "transudes",
    "transvans",
    "transaero",
    "transferee",
    "transtrand",
    "transducin",
    "transiting",
    "transbasal",
    "transprose",
    "transuding",
    "transurban",
    "transitory",
    "transfuses",
    "transcarga",
    "transverse",
    "transdural",
    "transcrime",
    "transexual",
    "transacted",
    "transtario",
    "transmural",
    "transposon",
    "transcript",
    "transacter",
    "transaxial",
    "transected",
    "transposal",
    "transworld",
    "transbrake",
    "transduced",
    "transexion",
    "transposer",
    "transferer",
    "transplace",
    "transferor",
    "translates",
    "transmeate",
    "transolver",
    "transferre",
    "transitive",
    "transducer",
    "transforms",
    "transacqua",
    "translunar",
    "translucid",
    "transients",
    "transcribe",
    "retransmit",
    "transships",
    "translated",
    "transmuted",
    "transaxles",
    "transition",
    "transpired",
    "transports",
    "transpolar",
    "transposed",
    "transunion",
    "translator",
    "transvalue",
    "transistor",
    "transiliac",
    "transitron",
    "transfused",
    "transpiler",
    "transfrete",
    "transactor",
    "transprint",
    "transshape",
    "transience",
    "transfects",
    "transwoman",
    "transduces",
    "transobuoy",
    "transfixes",
    "transgress",
    "transferal",
    "transhuman",
    "transeptal",
    "airtransse",
    "transmutes",
    "transiency",
    "transpubic",
    "transfixed",
    "transradar",
    "transplant",
    "fortransit",
    "creditrans",
    "transmuter",
    "transigere",
    "transposes",
    "transpires",
    "transgredi",
    "trans peak",
    "transcends",
    "alptransit",
    "transflash",
    "transgenes",
    "transgenic",
    "transudate",
    "transsonic",
    "transputer",
    "transposing",
    "transversal",
    "translucent",
    "transferees",
    "transgenics",
    "translators",
    "transcended",
    "transfinite",
    "transsummer",
    "transecting",
    "transracial",
    "transiently",
    "transactors",
    "transhipped",
    "transmitter",
    "transfigure",
    "transfected",
    "transhumant",
    "translation",
    "transforate",
    "translocate",
    "translating",
    "transcriber",
    "transilient",
    "transcripts",
    "transfusive",
    "transitions",
    "transmutual",
    "transferrin",
    "transformer",
    "transferred",
    "transcribed",
    "cotransport",
    "transuranic",
    "transporter",
    "transdermal",
    "transposons",
    "transudates",
    "transferral",
    "transplants",
    "transcalent",
    "retranslate",
    "transmarine",
    "transmeable",
    "transmitted",
    "transalpine",
    "transnature",
    "transcoding",
    "transducers",
    "gender wage",
    "translatory",
    "transponder",
    "transfixion",
    "transvalued",
    "transdermic",
    "intransient",
    "retransform",
    "transferase",
    "transported",
    "translative",
    "transacting",
    "transfusing",
    "transmuting",
    "transducing",
    "transpierce",
    "transfixing",
    "transformed",
    "transverter",
    "transferors",
    "retransmits",
    "transistors",
    "transection",
    "transocular",
    "transpadane",
    "transportal",
    "transrectal",
    "transmittal",
    "transpiring",
    "transferrer",
    "transceiver",
    "transfusion",
    "transiences",
    "translunary",
    "transcribes",
    "transvalues",
    "transjordan",
    "transfluent",
    "transaction",
    "transparent",
    "transcolate",
    "transonance",
    "transpirate",
    "transpennine",
    "transparency",
    "transference",
    "transparence",
    "transitivity",
    "transmitters",
    "transfecting",
    "transferable",
    "transections",
    "transcursion",
    "transcending",
    "transvaluing",
    "transiencies",
    "transpicuous",
    "transcribing",
    "retranslates",
    "transhumance",
    "transferrers",
    "translocated",
    "transduction",
    "transmigrant",
    "transcranial",
    "transgressed",
    "transitively",
    "transpierced",
    "transferring",
    "transcribers",
    "transaminase",
    "transmissive",
    "transmittals",
    "transfusable",
    "transpacific",
    "transluminal",
    "transporters",
    "transponders",
    "transversion",
    "transmundane",
    "translucence",
    "transplanted",
    "gender roles",
    "translucency",
    "ditransitive",
    "transmigrate",
    "transceivers",
    "transitional",
    "transfigured",
    "transfigures",
    "transferases",
    "transgresses",
    "transelement",
    "transmission",
    "transmogrify",
    "translatable",
    "transcurrent",
    "transvestism",
    "transversals",
    "transfection",
    "transdialect",
    "mistranslate",
    "transgenesis",
    "transductant",
    "transactions",
    "transforming",
    "transudation",
    "transporting",
    "translocates",
    "transuranium",
    "transmitting",
    "translations",
    "transmutable",
    "transmontane",
    "transversely",
    "transshipped",
    "transgressor",
    "translocator",
    "untranslated",
    "transpierces",
    "transhipping",
    "transitorily",
    "transpontine",
    "transoceanic",
    "retranslated",
    "transfixions",
    "transposable",
    "transfusions",
    "intransitive",
    "transcendent",
    "transplanter",
    "transvestite",
    "transformers",
    "transfusible",
    "intransigent",
    "transcaucasia",
    "mistranslates",
    "transactivate",
    "transformable",
    "transfections",
    "transthoracic",
    "transmittance",
    "transylvanian",
    "mistranslated",
    "transgressive",
    "transmittable",
    "transnatation",
    "transplanting",
    "transmissible",
    "transpiercing",
    "transferrible",
    "transportment",
    "transcolation",
    "transvestites",
    "transistorise",
    "transmissions",
    "translucently",
    "trans-pacific",
    "intranscalent",
    "translucences",
    "transportance",
    "retranslating",
    "transcription",
    "transaminases",
    "transcatheter",
    "transferrence",
    "transductions",
    "retransmitted",
    "transcribbler",
    "transmutative",
    "transmembrane",
    "transshipment",
    "transactinide",
    "transplendent",
    "intransigeant",
    "intransigence",
    "transcendency",
    "intransigents",
    "transnational",
    "transgressing",
    "translocating",
    "translational",
    "transcriptase",
    "transactional",
    "translocation",
    "transferrable",
    "transparently",
    "transmittancy",
    "transudations",
    "transliterate",
    "transmigrated",
    "transcriptive",
    "transposition",
    "transmigrante",
    "nontransitive",
    "transurethral",
    "transpositive",
    "gender equity",
    "transcriptome",
    "transpiration",
    "transatlantic",
    "transfeminate",
    "transcultural",
    "transgressors",
    "transfusional",
    "intransigency",
    "transplanters",
    "transistorize",
    "transmittible",
    "transmutation",
    "transpalatine",
    "trans-america",
    "transshipping",
    "turtle gender",
    "transmigrates",
    "transgression",
    "transcurrence",
    "transmigrator",
    "retranslation",
    "transcendence",
    "transportable",
    "transfiguring",
    "transpersonal",
    "transcutaneous",
    "transistorises",
    "untransmutable",
    "autotransplant",
    "transitiveness",
    "transgressions",
    "translatitious",
    "transistorized",
    "translocations",
    "gender pay gap",
    "intransigentes",
    "trans atlantic",
    "transparencies",
    "transcendently",
    "transmigratory",
    "retransmission",
    "transferential",
    "transportation",
    "intransigently",
    "transcriptions",
    "transsulfurase",
    "transcorporate",
    "homotransplant",
    "subtranslucent",
    "transmittivity",
    "detransitivize",
    "intransigences",
    "transcapillary",
    "transitionally",
    "transpositions",
    "transsegmental",
    "intransmutable",
    "transcendental",
    "transfretation",
    "transmethylase",
    "retranslations",
    "transtentorial",
    "untransferable",
    "intransitively",
    "transductional",
    "transanimation",
    "transistorised",
    "transmissivity",
    "xenotransplant",
    "impertransible",
    "transplendency",
    "transamination",
    "transpatronize",
    "transplacental",
    "mistranslation",
    "transmutations",
    "transmigrators",
    "transmittances",
    "transliterates",
    "translatorship",
    "transliterated",
    "transitoriness",
    "intransitivise",
    "retransmitting",
    "transplantable",
    "mistranslating",
    "translucencies",
    "intransitivize",
    "transistorizes",
    "transabdominal",
    "transverberate",
    "intransitivity",
    "transformation",
    "transmogrified",
    "transcendences",
    "detransitivise",
    "transformative",
    "subtransparent",
    "transmigrating",
    "transmogrifies",
    "transshipments",
    "allotransplant",
    "transdniestria",
    "transpirations",
    "transpeptidase",
    "transvaluation",
    "transregionate",
    "untranslatable",
    "transvestitism",
    "transmigration",
    "transportingly",
    "gender of nouns",
    "transfiguration",
    "turtles' gender",
    "transformerless",
    "trans logistics",
    "transistor radio",
    "transcontinental",
    "gender price gap",
    "gendered language",
    "transition metals",
    "gender performance",
    "transubstantiation",
    "gendered marketing",
    "transformers prime",
    "transformers movie",
    "gender reassignment",
    "diphosphotransferase",
    "transitioning states",
    "transversourethralis",
    "transdifferentiation",
    "transphosphorylation",
    "carboxyltransferases",
    "carbamoyltransferase",
    "costotransversectomy",
    "gender and ethnicity",
    "pentosyltransferases",
    "transfusion reaction",
    "autotransplantations",
    "galactosyltransferase",
    "carbamoyltransferases",
    "heterotransplantation",
    "gender reveal parties",
    "aminoacyltransferases",
    "phosphotransacetylase",
    "nucleotidyltransferase",
    "transphosphoribosidase",
    "glucuronosyltransferase",
    "transitional government",
    "pyrophosphotransferases",
    "transubstantiationalist",
    "nucleotidyltransferases",
    "gender of a noun changes",
    "transureteroureterostomy",
    "deoxyribosyltransferases",
    "racial and gender equality",
]
irrelevant_for_anti_keywords = []
ANTI_KEYWORDS = [
    "electric aircraft",
    "car",
    "spice girls",
    "sex slave",
    "transport",
    "gender of nouns",
    "gender of a noun changes",
]

OGS_KEYWORDS = {}
KEYWORD_SYNONYMS = {}
import re
import spacy
import numpy as np
from sentence_transformers import SentenceTransformer, util
import yake
from rake_nltk import Rake
import unicodedata

# Initialize NLP tools and models
nlp = spacy.load("en_core_web_md")  # 'en_core_web_lg' can also be used
model = SentenceTransformer("paraphrase-MiniLM-L6-v2")
# Initialize YAKE and RAKE
kw_extractor = yake.KeywordExtractor()
r = Rake()

# Cache to store phrase embeddings
phrase_embedding_cache = {}

# Function to cache phrase embeddings
def get_phrase_embedding(phrase: str):
    if phrase not in phrase_embedding_cache:
        phrase_embedding_cache[phrase] = model.encode(phrase, convert_to_tensor=True, show_progress_bar=True)
    return phrase_embedding_cache[phrase]

# Core matching function with improved error handling and logic
def smart_kay_prace_maching(
    text: str,
    phrases: list[str],
    irrelevant_phrases: list[str],
    similarity_threshold: float = 0.9,
) -> tuple[int, list[str], list[str]]:
    keyword_output = []
    total_score = 0
    text = text.lower()

    # Extract keywords using YAKE and RAKE
    keywords = [kw for kw, score in kw_extractor.extract_keywords(text)]
    r.extract_keywords_from_text(text)
    ranked_phrases = r.get_ranked_phrases()

    # Combine keywords and ranked phrases
    combined_keywords = list(set(keywords + ranked_phrases))

    # Batch encode the combined keywords
    text_embeddings = model.encode(combined_keywords, convert_to_tensor=True)

    # Cache and batch encode the phrases
    phrase_embeddings = [get_phrase_embedding(phrase) for phrase in phrases]
    irrelevant_phrase_embeddings = [get_phrase_embedding(phrase) for phrase in irrelevant_phrases]

    # Convert to NumPy arrays for faster similarity calculations
    phrase_embeddings = np.array([emb.cpu().numpy() for emb in phrase_embeddings])
    irrelevant_phrase_embeddings = np.array([emb.cpu().numpy() for emb in irrelevant_phrase_embeddings])
    text_embeddings_np = np.array([emb.cpu().numpy() for emb in text_embeddings])

    outputs = {}

    # Calculate similarity between text keywords and phrases
    for i, phrase_embedding in enumerate(phrase_embeddings):
        phrase = phrases[i]

        try:
            similarities = util.pytorch_cos_sim(text_embeddings_np, phrase_embedding).numpy().flatten()

            for j, similarity in enumerate(similarities):
                if similarity > similarity_threshold and len(combined_keywords[j]) >= 5:
                    keyword = combined_keywords[j]
                    outputs[keyword] = {
                        "phrase": phrase,
                        "similarity_good": max(similarity, outputs.get(keyword, {}).get("similarity_good", 0)),
                        "length_phrase": len(phrase),
                        "text_embedding": text_embeddings_np[j],
                    }

        except ValueError:
            print(f"Skipping due to incompatible dimensions for keyword: {phrase}")

    # Check for irrelevant phrases and their similarity
    for keyword, output in outputs.items():
        bad_similarities = util.pytorch_cos_sim(np.array([output["text_embedding"]]), irrelevant_phrase_embeddings).numpy().flatten()
        max_bad_similarity = np.max(bad_similarities)
        if max_bad_similarity > similarity_threshold:
            outputs[keyword]["similarity_bad"] = max_bad_similarity

    # Calculate final score
    for output in outputs.values():
        score = (output["similarity_good"] - output.get("similarity_bad", 0)) * output["length_phrase"]
        if score > 0:
            total_score += score
            keyword_output.append(output["phrase"])

    return total_score, keyword_output

def normalize_text(text):
    if not text:
        return ""
    text = re.sub(r"[-_\\n]", " ", text)
    text = unicodedata.normalize("NFKD", text).encode("ascii", "ignore").decode("utf-8")
    text = re.sub(r"[^\w\s]", "", text)
    return re.sub(r"\s+", " ", text).strip().lower()

def find_keyword_positions(text, keywords, relevant_window, irrelevant_phrases):
    found_keywords = []
    for keyword in keywords:
        normalized_keyword = normalize_text(keyword)
        for match in re.finditer(r"\b" + re.escape(normalized_keyword) + r"\b", text, re.IGNORECASE):
            start, end = match.start(), match.end()
            surrounding_text = text[max(0, start - relevant_window): end + relevant_window]
            if not contains_irrelevant(irrelevant_phrases, surrounding_text):
                found_keywords.append((keyword, start, end))
    return found_keywords

def contains_irrelevant(phrases, segment):
    return any(re.search(r"\b" + re.escape(phrase) + r"\b", segment, re.IGNORECASE) for phrase in phrases)

def relative_keywords_score(text: str,bypass_anit=False):
    text = normalize_text(text)
    if not text:
        return 0, [], []
    
    relevant_window = 50
    processed_positions = set()

    found_keywords = find_keyword_positions(text, KEYWORDS, relevant_window, irrelevant_for_keywords)

    score = calculate_keyword_score(found_keywords, processed_positions, len(text))
    
    
    if not bypass_anit:
        found_anti_keywords = find_keyword_positions(text, ANTI_KEYWORDS, relevant_window, irrelevant_for_keywords)
        anti_score = calculate_keyword_score(found_anti_keywords, processed_positions, len(text))
    else:
        found_anti_keywords = []
        anti_score = 0
    
    final_score = score - anti_score
    if final_score < 0:
        final_score , found_keywords =smart_kay_prace_maching(text, KEYWORDS, irrelevant_for_keywords)


    return final_score, list(set([kw for kw, _, _ in found_keywords])), list(set([kw for kw, _, _ in found_anti_keywords]))
def calculate_keyword_score(found_keywords, processed_positions, text_length):
    score = 0
    keyword_frequencies = {keyword: 0 for keyword, _, _ in found_keywords}

    for keyword, start, end in found_keywords:
        # Increment the keyword frequency
        keyword_frequencies[keyword] += 1

        if not any(pos in processed_positions for pos in range(start, end)):
            keyword_weight = len(keyword.split())
            frequency_boost = keyword_frequencies[keyword]
            # Ensure the frequency boost is at least 1
            if frequency_boost == 0:
                frequency_boost = 1
            positional_boost = max(1, (text_length - start) / text_length * 2)
            
            # Log the calculation process for debugging
            logging.info(f"Keyword: {keyword}, Frequency Boost: {frequency_boost}, Positional Boost: {positional_boost}")
            
            score += keyword_weight * frequency_boost * positional_boost
            processed_positions.update(range(start, end))

    return score
